var MP = MP || {};
MP.util = {
	/**
	* Given a gradient generated by two colors, this returns the color at a particular point of the gradient
	* @param [startColor] {String} a hex color, ex ffffff
	* @param [endColor] {String} a hex color, ex 000000
	* @param colorPoint {Float} a point between 0 and 1
	* @return {String} ex 808080
	*/
	generateColorBetweenTwoColors: function(startColor, endColor, colorPoint) {
		var _convertHexColorToInt = function(hexColor) {
			var colors = hexColor.match(/.{1,2}/g);

			colors.forEach(function(color, i) {
				colors[i] = parseInt(color, 16);
			});

			return colors;
		};

		var _convertIntColorToHex = function(intColor) {
			intColor.forEach(function(color, i) {
				var hexColor = color.toString(16);
				
				if (hexColor.length !== 2) {
					hexColor = '0' + hexColor;
				}

				intColor[i] = hexColor;
			});

			return intColor.join('');
		};

		var startColors = _convertHexColorToInt(startColor);
		var endColors = _convertHexColorToInt(endColor);
		var pointColors = [];

		for (var i = 0; i <= 2; i += 1) {
			pointColors.push(Math.round((endColors[i] - startColors[i]) * colorPoint + startColors[i]));
		}

		return _convertIntColorToHex(pointColors);
	},

	test: function(method, input, output, expected) {
		console.log((output === expected ? 'PASS - ' : 'FAIL'), 'method: ' + method, 'Input: #' + input + '# Output: #' + output + '# Expected: #' + expected + '#');
	}
};

//MP.util.test('generateColorBetweenTwoColors', '#ffffff, #000000, 0.5', MP.util.generateColorBetweenTwoColors('ffffff', '000000', 0.5), '808080');